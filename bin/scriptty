#!/usr/bin/env bash
#
# scriptty - Enhanced BSD script wrapper for macOS with modern UX
#
# Usage: scriptty [OPTIONS] [-- COMMAND [ARGS...]]
#
# Records terminal sessions to timestamped log files for later review.
# By default, logs are saved to /tmp/dev/<tty>_<timestamp>
#
# Options:
#   -d, --dir DIR      Custom log directory (default: /tmp/dev)
#   -a, --append       Append to existing log file instead of creating new
#   -q, --quiet        Suppress script start and stop messages
#   -e, --exit-code    Return exit code of recorded command
#   -f, --flush        Force flush output after each write (live streaming)
#   -k, --keylog       Record timing data for keystroke replay
#   -r, --raw          Record in raw mode (no post-processing)
#   --private          Warn about sensitive data recording and scan logs
#   --resume           Resume the most recent session for this TTY
#   -s, --status       Check if a script session is currently active
#   -l, --list         List recent session logs
#   --view FILE        View a log file with less (strips ANSI codes)
#   --clean [DAYS]     Remove log files older than DAYS (default: 30)
#   --filter FILE      Display log file with ANSI codes stripped
#   -h, --help         Show this help message
#
# Examples:
#   scriptty                    # Start recording interactive shell
#   scriptty claude             # Record a claude session  
#   scriptty -k make build      # Record with keystroke timing data
#   scriptty -f npm test        # Live stream npm test output
#   scriptty -r debug-session   # Raw recording, no post-processing
#   scriptty -s                 # Check if recording is active
#   scriptty -l                 # List recent session logs
#   scriptty -q claude --help   # Quiet mode, record claude --help
#   scriptty -d ~/logs make     # Record make with custom log dir

set -euo pipefail

# Default configuration
DEFAULT_LOG_DIR="/tmp/dev"
LOG_DIR="$DEFAULT_LOG_DIR"
APPEND_MODE=false
QUIET_MODE=false
RETURN_EXIT_CODE=false
FORCE_FLUSH=false
KEYLOG_MODE=false
RAW_MODE=false
PRIVATE_MODE=false
RESUME_MODE=false
TIMESTAMP=$(date +%Y%m%d_%H%M%S)
START_TIME=$(date +%s)

# Platform detection
PLATFORM=$(uname -s)
case "$PLATFORM" in
    Darwin) IS_MACOS=true ;;
    Linux)  IS_MACOS=false ;;
    *)      IS_MACOS=false ;;
esac

# Verify script command availability
if ! command -v script >/dev/null 2>&1; then
    echo "[ERROR] script command not found in PATH"
    echo "        The script command should be available on macOS by default"
    echo "        If missing, try: xcode-select --install"
    exit 1
fi

# Function to display usage
show_help() {
    sed -n '3,25p' "$0" | sed 's/^# //' | sed 's/^#//'
    exit 0
}

# Function to get current TTY
get_tty() {
    local tty_id
    tty_id=$(ps -p $$ -o tty= | xargs)
    
    if [[ "$tty_id" == "??" ]] || [[ -z "$tty_id" ]]; then
        echo ""
        return 1
    fi
    
    echo "$tty_id"
    return 0
}

# Function to check if script is already running
check_script_status() {
    if [[ -n "${SCRIPT:-}" ]]; then
        echo "[OK] Script session is currently active"
        echo "     Recording to: $SCRIPT"
        return 0
    else
        echo "[INFO] No active script session"
        return 1
    fi
}

# Function to list recent logs
list_logs() {
    local search_dir="${1:-$DEFAULT_LOG_DIR}"
    
    if [[ ! -d "$search_dir" ]]; then
        echo "[INFO] No logs found (directory doesn't exist: $search_dir)"
        return 1
    fi
    
    local logs
    logs=$(find "$search_dir" -name "*_*" -type f 2>/dev/null | sort -r | head -10)
    
    if [[ -z "$logs" ]]; then
        echo "[INFO] No session logs found in $search_dir"
        return 1
    fi
    
    echo "Recent session logs:"
    echo "$logs" | while read -r log; do
        local size
        size=$(ls -lh "$log" | awk '{print $5}')
        local modified
        modified=$(ls -l "$log" | awk '{print $6, $7, $8}')
        echo "  * $(basename "$log") (${size}, ${modified})"
    done
}

# Function to view log file with ANSI filtering
view_log() {
    local log_file="$1"
    
    if [[ ! -f "$log_file" ]]; then
        echo "[ERROR] Log file not found: $log_file"
        return 1
    fi
    
    # Use col -b to remove backspace characters and filter ANSI codes
    if command -v col >/dev/null 2>&1; then
        col -b < "$log_file" | less
    else
        # Fallback: use sed to strip basic ANSI codes
        sed 's/\x1b\[[0-9;]*m//g' "$log_file" | less
    fi
}

# Function to filter ANSI codes from log file
filter_log() {
    local log_file="$1"
    
    if [[ ! -f "$log_file" ]]; then
        echo "[ERROR] Log file not found: $log_file"
        return 1
    fi
    
    # Use col -b to remove backspace characters and filter ANSI codes
    if command -v col >/dev/null 2>&1; then
        col -b < "$log_file"
    else
        # Fallback: use sed to strip basic ANSI codes
        sed 's/\x1b\[[0-9;]*m//g' "$log_file"
    fi
}

# Function to clean old log files
clean_logs() {
    local search_dir="${1:-$DEFAULT_LOG_DIR}"
    local days="${2:-30}"
    
    if [[ ! -d "$search_dir" ]]; then
        echo "[INFO] No logs directory found: $search_dir"
        return 1
    fi
    
    local count
    count=$(find "$search_dir" -name "*_*" -type f -mtime +"$days" 2>/dev/null | wc -l | tr -d ' ')
    
    if [[ "$count" -eq 0 ]]; then
        echo "[INFO] No log files older than $days days found"
        return 0
    fi
    
    echo "[INFO] Found $count log files older than $days days"
    find "$search_dir" -name "*_*" -type f -mtime +"$days" -print
    
    read -p "Delete these files? [y/N] " -n 1 -r
    echo
    if [[ $REPLY =~ ^[Yy]$ ]]; then
        find "$search_dir" -name "*_*" -type f -mtime +"$days" -delete
        echo "[OK] Deleted $count old log files"
    else
        echo "[INFO] No files deleted"
    fi
}

# Function to scan for potential sensitive data
scan_for_sensitive_data() {
    local log_file="$1"
    
    if [[ ! -f "$log_file" ]]; then
        return 0
    fi
    
    local warnings=()
    
    # Check for potential password patterns
    if grep -q -i "password\|passwd\|pwd" "$log_file" 2>/dev/null; then
        warnings+=("Password-related text detected")
    fi
    
    # Check for potential SSH key patterns
    if grep -q "BEGIN.*PRIVATE KEY" "$log_file" 2>/dev/null; then
        warnings+=("Private key detected")
    fi
    
    # Check for potential API key patterns
    if grep -q -E "[A-Za-z0-9]{32,}" "$log_file" 2>/dev/null; then
        warnings+=("Long alphanumeric strings (potential API keys) detected")
    fi
    
    if [[ ${#warnings[@]} -gt 0 ]]; then
        echo "[WARNING] Potential sensitive data found in log:"
        for warning in "${warnings[@]}"; do
            echo "          - $warning"
        done
        echo "          Consider reviewing: $log_file"
        echo ""
    fi
}

# Function to find the most recent log for resume
find_resume_log() {
    local tty_id="$1"
    local search_dir="$2"
    
    find "$search_dir" -name "${tty_id}_*" -type f 2>/dev/null | sort -r | head -1
}

# Function to calculate session duration
calculate_duration() {
    local start_time="$1"
    local end_time="$(date +%s)"
    local duration=$((end_time - start_time))
    
    local hours=$((duration / 3600))
    local minutes=$(((duration % 3600) / 60))
    local seconds=$((duration % 60))
    
    if [[ $hours -gt 0 ]]; then
        echo "${hours}h ${minutes}m ${seconds}s"
    elif [[ $minutes -gt 0 ]]; then
        echo "${minutes}m ${seconds}s"
    else
        echo "${seconds}s"
    fi
}

# Variables for command execution
COMMAND_TO_RUN=""
COMMAND_ARGS=()

# Parse command line arguments
while [[ $# -gt 0 ]]; do
    case $1 in
        -d|--dir)
            LOG_DIR="$2"
            shift 2
            ;;
        -a|--append)
            APPEND_MODE=true
            shift
            ;;
        -q|--quiet)
            QUIET_MODE=true
            shift
            ;;
        -e|--exit-code)
            RETURN_EXIT_CODE=true
            shift
            ;;
        -f|--flush)
            FORCE_FLUSH=true
            shift
            ;;
        -k|--keylog)
            KEYLOG_MODE=true
            shift
            ;;
        -r|--raw)
            RAW_MODE=true
            shift
            ;;
        --private)
            PRIVATE_MODE=true
            shift
            ;;
        --resume)
            RESUME_MODE=true
            shift
            ;;
        -s|--status)
            check_script_status
            exit $?
            ;;
        -l|--list)
            list_logs "${2:-$DEFAULT_LOG_DIR}"
            exit $?
            ;;
        --view)
            view_log "$2"
            exit $?
            ;;
        --filter)
            filter_log "$2"
            exit $?
            ;;
        --clean)
            if [[ -n "$2" ]] && [[ "$2" != -* ]]; then
                clean_logs "$DEFAULT_LOG_DIR" "$2"
                shift 2
            else
                clean_logs "$DEFAULT_LOG_DIR"
                shift
            fi
            exit $?
            ;;
        -h|--help)
            show_help
            ;;
        --)
            # Everything after -- is the command to run
            shift
            if [[ $# -gt 0 ]]; then
                COMMAND_TO_RUN="$1"
                shift
                COMMAND_ARGS=("$@")
            fi
            break
            ;;
        -*)
            echo "[ERROR] Unknown option: $1"
            echo "        Use -h or --help for usage information"
            exit 1
            ;;
        *)
            # First non-option argument is the command to run
            COMMAND_TO_RUN="$1"
            shift
            COMMAND_ARGS=("$@")
            break
            ;;
    esac
done

# Check if script is already running
if [[ -n "${SCRIPT:-}" ]]; then
    echo "[WARNING] Script session already active!"
    echo "          Recording to: $SCRIPT"
    echo "          Exit the current session before starting a new one"
    exit 1
fi

# Get TTY information
TTY_ID=$(get_tty)
if [[ -z "$TTY_ID" ]]; then
    echo "[ERROR] No valid TTY detected"
    echo "        This command must be run in an interactive terminal"
    exit 1
fi

# Create log directory if it doesn't exist
if [[ ! -d "$LOG_DIR" ]]; then
    mkdir -p "$LOG_DIR" || {
        echo "[ERROR] Failed to create log directory: $LOG_DIR"
        exit 1
    }
fi

# Determine log file path
if [[ "$RESUME_MODE" == true ]]; then
    # Resume mode: find most recent log and append
    LOG_FILE=$(find_resume_log "$TTY_ID" "$LOG_DIR")
    if [[ -z "$LOG_FILE" ]]; then
        echo "[ERROR] No existing log file found for TTY $TTY_ID to resume"
        echo "        Use 'scriptty -l' to see available logs"
        exit 1
    fi
    APPEND_MODE=true
    echo "[OK] Resuming session from: $(basename "$LOG_FILE")"
elif [[ "$APPEND_MODE" == true ]]; then
    # Find the most recent log file for this TTY
    LOG_FILE=$(find "$LOG_DIR" -name "${TTY_ID}_*" -type f 2>/dev/null | sort -r | head -1)
    
    if [[ -z "$LOG_FILE" ]]; then
        # No existing log file, create a new one
        if [[ -n "$COMMAND_TO_RUN" ]]; then
            # Include command name in filename (sanitize it first)
            SAFE_CMD=$(basename "$COMMAND_TO_RUN" | tr -cd '[:alnum:]._-')
            LOG_FILE="${LOG_DIR}/${TTY_ID}_${SAFE_CMD}_${TIMESTAMP}"
        else
            LOG_FILE="${LOG_DIR}/${TTY_ID}_${TIMESTAMP}"
        fi
        echo "[INFO] No existing log found, creating new file"
    else
        echo "[OK] Appending to existing log"
    fi
else
    if [[ -n "$COMMAND_TO_RUN" ]]; then
        # Include command name in filename (sanitize it first)
        SAFE_CMD=$(basename "$COMMAND_TO_RUN" | tr -cd '[:alnum:]._-')
        LOG_FILE="${LOG_DIR}/${TTY_ID}_${SAFE_CMD}_${TIMESTAMP}"
    else
        LOG_FILE="${LOG_DIR}/${TTY_ID}_${TIMESTAMP}"
    fi
fi

# Prepare script command options
SCRIPT_OPTS=()
if [[ "$QUIET_MODE" == true ]]; then
    SCRIPT_OPTS+=("-q")
fi
if [[ "$FORCE_FLUSH" == true ]]; then
    SCRIPT_OPTS+=("-F")
fi
if [[ "$KEYLOG_MODE" == true ]]; then
    SCRIPT_OPTS+=("-k")
fi
if [[ "$RAW_MODE" == true ]]; then
    SCRIPT_OPTS+=("-r")
fi
if [[ "$APPEND_MODE" == true ]] && [[ -f "$LOG_FILE" ]]; then
    SCRIPT_OPTS+=("-a")
fi

# Private mode warning
if [[ "$PRIVATE_MODE" == true ]] && [[ "$QUIET_MODE" != true ]]; then
    echo "[WARNING] Private mode enabled - be cautious of sensitive data!"
    echo "          Avoid typing passwords, API keys, or confidential information"
    echo "          Log will be scanned for potential sensitive data after recording"
    echo ""
fi

# Start script session
if [[ "$QUIET_MODE" != true ]]; then
    if [[ "$RESUME_MODE" == true ]]; then
        echo "[OK] Resuming terminal recording"
    else
        echo "[OK] Starting terminal recording"
    fi
    echo "     TTY: $TTY_ID"
    echo "     Log: $LOG_FILE"
    if [[ "$KEYLOG_MODE" == true ]]; then
        echo "     Mode: Keylog recording (timing data included)"
    elif [[ "$RAW_MODE" == true ]]; then
        echo "     Mode: Raw recording (no post-processing)"
    elif [[ "$FORCE_FLUSH" == true ]]; then
        echo "     Mode: Live streaming (real-time output)"
    fi
    if [[ -n "$COMMAND_TO_RUN" ]]; then
        echo "     Command: $COMMAND_TO_RUN"
        if [[ ${#COMMAND_ARGS[@]} -gt 0 ]]; then
            echo "     Args: ${COMMAND_ARGS[*]}"
        fi
    else
        echo "     Type 'exit' or press Ctrl+D to stop recording"
    fi
    echo ""
fi

# Run script command (BSD syntax)
EXIT_CODE=0
if [[ -n "$COMMAND_TO_RUN" ]]; then
    # Execute the specified command (BSD syntax: script [options] file [command])
    script "${SCRIPT_OPTS[@]}" "$LOG_FILE" "$COMMAND_TO_RUN" "${COMMAND_ARGS[@]}"
    EXIT_CODE=$?
else
    # Interactive shell mode
    script "${SCRIPT_OPTS[@]}" "$LOG_FILE"
    EXIT_CODE=$?
fi

# Post-session information
if [[ "$QUIET_MODE" != true ]]; then
    local duration
    duration=$(calculate_duration "$START_TIME")
    
    echo ""
    echo "[OK] Recording session ended"
    echo "     Duration: $duration"
    echo "     Log saved to: $LOG_FILE"
    echo "     Size: $(ls -lh "$LOG_FILE" | awk '{print $5}')"
    echo "     View with: scriptty --view '$LOG_FILE'"
    echo "     Or filtered: scriptty --filter '$LOG_FILE'"
fi

# Scan for sensitive data if in private mode
if [[ "$PRIVATE_MODE" == true ]]; then
    scan_for_sensitive_data "$LOG_FILE"
fi

# Return appropriate exit code
if [[ "$RETURN_EXIT_CODE" == true ]]; then
    exit $EXIT_CODE
fi